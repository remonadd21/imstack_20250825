package com.company.java008_ex;

import java.util.Scanner;

public class MethodEx011_bank {
	
	/*숫자 입력*/
	public static int scanInt() {		
		Scanner scanner = new Scanner(System.in);
		return scanner.nextInt();
	}
	
	
	/*문자열 입력*/
	public static String scanString() {		
		Scanner scanner = new Scanner(System.in);
		return scanner.next();
	}
	
	
	/////////////////////////////////////////////
	public static void main(String []args) {
		
		// 변수
		String[] id = new String[3];
		String[] pass = new String[3];
		double[] balance = new double[3];
		
		
		boolean i = true;
		while(i) {
			System.out.print("🌟💰 WELCOME TO BANK SYSTEM 💰🌟\n"
					+ "[1] ➕ 계좌 추가\n"
					+ "[2] 🔍 계좌 조회\n"
					+ "[3] 💵 입금하기\n"
					+ "[4] 💸 출금하기\n"
					+ "[5] 🗑️ 계좌 삭제\n"
					+ "[9] ❌ 종료\n\n"
					+ "👉 번호를 선택하세요:");
			
			//변수
			int num;
			
			//입력
			num = scanInt();
			
			//처리
			switch(num) {
				case 9: System.out.println("👋 시스템을 종료합니다. 안녕히 가세요!"); 
				i=false;
				break;
			}
			
			
			//출력
		}
		
		
		
	}
	/////////////////////////////////////////////

	
	
}
//## 💻 자바 미니 프로젝트: 은행 계좌 관리 시스템
//
//**패키지명**: `com.company.java008_ex_MiniProject_Bank`  
//**클래스명**: `Bank003_Array`
//
//다음 조건을 만족하는 **은행 계좌 관리 시스템**을 배열과 메서드를 활용하여 구현하세요.
//
//---
//
//### ■ [1단계] 데이터 구성
//
//다음과 같은 정보를 저장할 수 있는 배열을  main 안에 선언하세요:
//```java
//String[] id = new String[3];
//String[] pass = new String[3];
//double[] balance = new double[3];
//```
//
//- 각 배열의 인덱스는 하나의 계좌를 의미합니다.
//- `id[i]`: 계좌 아이디
//- `pass[i]`: 계좌 비밀번호
//- `balance[i]`: 계좌 잔액
//
//---
//
//### ■ [2단계] 메뉴 출력 및 선택
//
//다음과 같은 메뉴를 **무한 반복**으로 출력하세요:
//
//```
//🌟💰 WELCOME TO BANK SYSTEM 💰🌟
//[1] ➕ 계좌 추가
//[2] 🔍 계좌 조회
//[3] 💵 입금하기
//[4] 💸 출금하기
//[5] 🗑️ 계좌 삭제
//[9] ❌ 종료
//👉 번호를 선택하세요:
//```
//
//> 🔧 **각 기능은 반드시 별도의 메서드로 분리하여 구현**하세요.  
//> 메뉴 선택에 따라 해당 기능을 수행할 때는,
// **배열을 매개변수로 전달**하여 메서드가 데이터를 처리하도록 하세요.
//
//예시:
//```java
//addAccount(id, pass, balance); // 계좌 추가
//```
//
//---
//
//### ■ [3단계] 기능 구현
//
//#### ① 계좌 추가
//
//- 빈 공간이 있을 경우, 아이디, 비밀번호, 초기 금액을 입력받아 계좌를 생성하세요.
//- 계좌가 3개 모두 찼을 경우 다음과 같이 출력하세요:
//
//```
//⚠️ 계좌를 생성할 수 없습니다.
//```
//
//---
//
//#### ② 계좌 조회
//
//- 아이디와 비밀번호를 입력받아 인증 후 해당 계좌 정보를 출력하세요.
//
//> 출력 예시:
//```
//[1] 아이디 > hong123
//[2] 비밀번호 > 1234
//[3] 잔액 > 50000.0
//```
//
//- 인증 실패 시:
//```
//❌ 아이디와 비밀번호를 확인해주세요!
//```
//
//---
//
//#### ③ 입금하기
//
//- 인증 후 입금할 금액을 입력받아 잔액을 증가시키세요.
//
//> 출력 예시:
//```
//입금할 금액 > 10000
//✅ 입금 완료! 현재 잔액: 60000.0
//```
//
//---
//
//#### ④ 출금하기
//
//- 인증 후 출금할 금액을 입력받아 잔액을 감소시키세요.
//- 잔액이 부족할 경우 출금되지 않도록 처리하세요.
//
//> 출력 예시:
//```
//출금할 금액 > 70000
//❌ 잔액이 부족합니다!
//```
//
//---
//
//#### ⑤ 계좌 삭제
//
//- 인증 후 삭제 여부를 확인하고, `y`를 입력하면 계좌 정보를 삭제하세요.
//
//> 출력 예시:
//```
//정말로 삭제하시겠습니까? (y/n) > y
//✅ 계좌가 삭제되었습니다.
//```
//
//---
//
//#### ⑥ 종료
//
//- 메뉴에서 `9`번을 선택하면 프로그램을 종료하세요.
//
//> 출력 예시:
//```
//👋 시스템을 종료합니다. 안녕히 가세요!
//```
//
//---
//
//### 🎁 [보너스 과제] 선택 구현
//
//- ✅ 전체 계좌 목록을 출력하는 기능
//- ✅ 계좌 추가 시 중복 아이디 방지 기능 
