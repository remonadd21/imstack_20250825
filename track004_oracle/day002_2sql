
-- 1. 문자열
-- 2. 숫자
-- 3. 날짜
-- 4. 변환


-----------------------------------------------------------------

-- 003_select_funtion.sql
-- 1. 문자열
-- upper 대문자, lower 소문자, initcap 대소문자 변환
-- length 문자열의 길이
-- substr 부분 문자열, instr  문자열있는지 확인(위치 문자열)
-- replace 바꾸기, lpad, rpad 채우기
-- trim , ltrim , rtrim 공백빼기
-- concat 문자열 연결

-- 1. 대소문자
select ename, upper(ename), lower(ename), initcap(ename) from emp;

-- 2. 문자열 길이 (lengthb는 바이트수)
select ename, length(ename), '킹', length('킹'), lengthb('킹') from emp;


-- 3. 부분 문자열 substr(필드, 시작, 시작에서 부터 몇개), 위치 문자열 instr
select ename, substr(ename,1,2), substr(ename, 1,3), substr(ename, 2,2), substr(ename, 3,2) from emp;\


-- dual은 더미 테이블 (테스트 테이블)
-- 마이너스 값은 뒤에서 부터 계산가능, -1은 e,  -3은 뒤에서 3번째에서 2개
select substr('oracle',-1), substr('oracle',-3), substr('oracle',-3,2) from dual;

-- instr은 위치값, 1부터 계산됨
select instr('oracle','a') from dual;

-- 해당 값이 없으면 0 출력 
select ename, instr(ename, 'A') from emp; 

-- 4. replace 바꾸기 (값 or 필드, 찾을값, 바꿀값), lpad, rpad
select replace('010-1234-5678','-','') from dual;

-- 왼쪽으로 채워짐
select lpad('oracle',10,'#') from dual;

-- 오른쪽으로 채워짐
select rpad('oracle',10,'#') from dual;

-- trim, ltrim, rtrim 공백빼기
select trim(' *oricle* '), ltrim(' *oricle* '), rtrim(' *oricle* ')from dual;


-- concat 문자열 연결
select concat('hello ','oracle') from dual;

-- concat은 2개의 문자열만 사용가능함
-- select concat('hello ','oracle','★') from dual;

-- 아래 처럼 concat안에 concat을 넣어서 2개로 만들어서 사용가능함!
select concat(concat('hello','oracle'),'★') from dual;


-- 아래 처럼 사용하면 concat없이 문자열 연결 가능
select 'hello' || 'oracle' || '♥' from dual;

-----------------------------------------------------------------

-- q1. ename을 대문자, 소문자, 첫글자만 대문자로 조회하기
select ename, upper(ename), lower(ename), initcap(ename) from emp;

-- q2. upper를 이용하여 ename이 king 인 데이터 조회하기
select ename from emp where lower(ename)=lower('king');

-- q3. upper를 이용하여 ename이 king 인 데이터 조회하기
select ename from emp where upper(ename) like upper('%king%');

-- q4. length를 이용하여 ename의 문자열 길이 조회하기

select ename, length(ename) from emp;

-- q5. ename의 문자열 길이가 5이상인 데이터 조회하기
select ename, length(ename) from emp where length(ename)>=5;


-- q6. length('한글'), lengthb('한글') 문자열 길이와 바이트수 반환하기
select length('한글'), lengthb('한글') from dual;


-- q7. 문자열 일부분 추출하기 
select job, substr(job,1,2), substr(job, 3,2), substr(job, 5) from emp;

-- q8. -의 의미는?
--  ( -length(job) job필드의 문자열 길이 만큼 뺀 길이 )
select job, substr(job,-length(job)), substr(job, -length(job),2), substr(job,-3) from emp;

-- q9. 특장 문자위치 찾기 (문자열 or 필드, 찾을 문자열, 몇번째 부터) , (문자열 or 필드, 찾을 문자열, 몇번째 부터, 몇자리)
select instr('hello, oracle!','l') as instr1, instr('hello, oracle!','l',5) as instr2, instr('hello, oracle!','l',2,2) as instr3 from dual;

-- q10. instr을 이용하여 s가 있는 데이터를 조회하시오
-- 값을 못찾으면 0, 찾으면 0보다 크게
select * from emp where instr(ename,'S')>0;

-- q11. like를 이용하여 사원이름에 s가 있는 데이터 조회하기
select * from emp where ename like '%S%';

-- q12, replace를 이용하여 연락처의 -를 공백으로 바꾸기
-- '_', '' 을 '_' 만 사용해도 공백을 없앨 수 있음
select ('010-12334-5678') as before,replace('010-12334-5678','-',' ') as rep1,replace('010-12334-5678','-') as rep2 from dual;

-- q13. lpad, rpad를 이용하여 조회하기
select ('oracle'), lpad('oracle',10,'#'), rpad('oracle',10,'*'),lpad('oracle',10),rpad('oracle',10) from dual;

-- q14 rpad를 이용하여 개인정보 뒷자리를 *로 출력받기
select rpad('911225-',14,'*'), rpad('010-1234-',13,'*') from dual;

-- q15 empno와 ename 사이에 : 문자열 넣고 연결하기
select concat(empno,concat(':',ename)) from emp where ename = upper('scott');

-- q16 trim 을 활용하여 공백을 제거하기
select
   '[' || trim(' _ _Oracle_ _ ') || ']' as trim  -- 양쪽 공백 제거
,  '[' || trim(LEADING FROM ' _ _Oracle_ _ ') || ']' as trim    -- 앞쪽 공백 없애기 
,  '[' || trim(TRAILING FROM ' _ _Oracle_ _ ') || ']' as trim   -- 뒤쪽 공백 없애기
,  '[' || trim(BOTH FROM ' _ _Oracle_ _ ') || ']' as trim           -- 양쪽 공백 없애기
from dual;


-- q17 trim 을 활용하여 공백을 제거하기
-- 주의! 맨 앞뒤로 공백이 있으면 해당 문자를 못 지움, 해당 문자가 앞이나 뒤에 있어야 문자가 지워짐

select
   '[' || trim(' _ _Oracle_ _ ') || ']' as trim  -- 양쪽 공백 제거
,  '[' || trim(LEADING '_' FROM'_ _Oracle_ _') || ']' as trim    -- 앞쪽 문자 제거 
,  '[' || trim(TRAILING '_' FROM'_ _Oracle_ _') || ']' as trim   -- 뒤쪽에 문자 제거
,  '[' || trim(BOTH '_' FROM '_ _Oracle_ _') || ']' as trim       -- 양쪽에 문자 제거
from dual;


-- q18 trim 을 활용하여 삭제할 문제 삭제후 출력
-- < , > 작업은 가장 앞뒤의 _가 사라지는 것을 확인 하기 위해 사용함
-- 매우중요) 맨 앞뒤에 공백이 있으면 기호가 사라지지 않으므로 필수로 확인하기
select
   '[' || trim(' _ _Oracle_ _ ') || ']' as trim0  
,  '[' || ltrim(' _ _Oracle_ _ ') || ']' as ltrim11   
,  '[' || ltrim('_ <Oracle_ _' , '_') || ']' as ltrim2    
,  '[' || rtrim(' _ _Oracle_ _ ') || ']' as rtrim1   
,  '[' || rtrim('_ _Oracle> _' , '_') || ']' as rtrim2          
from dual;
